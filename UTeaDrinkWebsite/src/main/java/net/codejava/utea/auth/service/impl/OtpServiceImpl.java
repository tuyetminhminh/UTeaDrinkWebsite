package net.codejava.utea.auth.service.impl;

import lombok.RequiredArgsConstructor;
import net.codejava.utea.auth.service.EmailService;
import net.codejava.utea.auth.service.OtpService;
import net.codejava.utea.common.entity.PasswordResetOtp;
import net.codejava.utea.common.entity.User;
import net.codejava.utea.common.repository.PasswordResetOtpRepository;
import net.codejava.utea.common.repository.UserRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Random;

@Service
@RequiredArgsConstructor
public class OtpServiceImpl implements OtpService {

    private final UserRepository userRepository;
    private final PasswordResetOtpRepository otpRepository;
    private final EmailService emailService;
    private final PasswordEncoder passwordEncoder;

    @Override
    @Transactional
    public void sendResetOtpToEmail(String email) {
        // T√¨m user theo email
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng"));

        // T·∫°o m√£ OTP 6 s·ªë
        String otpCode = generateOtpCode();

        // T·∫°o th·ªùi h·∫°n: 5 ph√∫t
        LocalDateTime expiresAt = LocalDateTime.now().plusMinutes(5);

        // L∆∞u OTP v√†o database
        PasswordResetOtp otp = PasswordResetOtp.builder()
                .user(user)
                .code(otpCode)
                .expiresAt(expiresAt)
                .used(false)
                .createdAt(LocalDateTime.now())
                .build();
        otpRepository.save(otp);

        // T·∫°o n·ªôi dung email HTML
        String emailContent = buildOtpEmailHtml(user.getFullName(), otpCode);

        // G·ª≠i email
        try {
            emailService.send(email, "üîë M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - UTeaDrink", emailContent);
        } catch (Exception e) {
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau.", e);
        }
    }

    @Override
    @Transactional
    public void resetPasswordByEmail(String email, String otpCode, String newPassword) {
        // T√¨m user
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Email kh√¥ng t·ªìn t·∫°i"));

        // T√¨m OTP h·ª£p l·ªá (ch∆∞a s·ª≠ d·ª•ng, ch∆∞a h·∫øt h·∫°n)
        PasswordResetOtp otp = otpRepository
                .findTopByUserAndUsedFalseAndExpiresAtAfterOrderByCreatedAtDesc(user, LocalDateTime.now())
                .orElseThrow(() -> new RuntimeException("M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n"));

        // Ki·ªÉm tra m√£ OTP c√≥ ƒë√∫ng kh√¥ng
        if (!otp.getCode().equals(otpCode.trim())) {
            throw new RuntimeException("M√£ OTP kh√¥ng ch√≠nh x√°c");
        }

        // ƒê√°nh d·∫•u OTP ƒë√£ s·ª≠ d·ª•ng
        otp.setUsed(true);
        otpRepository.save(otp);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        user.setPasswordHash(passwordEncoder.encode(newPassword));
        userRepository.save(user);
    }

    /**
     * T·∫°o m√£ OTP 6 s·ªë ng·∫´u nhi√™n
     */
    private String generateOtpCode() {
        Random random = new Random();
        int otp = 100000 + random.nextInt(900000); // 6 ch·ªØ s·ªë
        return String.valueOf(otp);
    }

    /**
     * T·∫°o n·ªôi dung email HTML ƒë·∫πp m·∫Øt
     */
    private String buildOtpEmailHtml(String fullName, String otpCode) {
        String name = (fullName != null && !fullName.isEmpty()) ? fullName : "Qu√Ω kh√°ch";
        
        return "<!DOCTYPE html>" +
            "<html>" +
            "<head>" +
            "<meta charset=\"UTF-8\">" +
            "<style>" +
            "body { font-family: 'Segoe UI', Arial, sans-serif; background: #f5f5f5; margin: 0; padding: 20px; }" +
            ".container { max-width: 600px; margin: 0 auto; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }" +
            ".header { background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%); padding: 30px; text-align: center; color: white; }" +
            ".header h1 { margin: 0; font-size: 28px; }" +
            ".content { padding: 40px 30px; }" +
            ".otp-box { background: linear-gradient(135deg, #FFF5E6 0%, #FFE8CC 100%); border: 2px dashed #FF6B35; border-radius: 10px; padding: 30px; text-align: center; margin: 25px 0; }" +
            ".otp-code { font-size: 42px; font-weight: bold; color: #FF6B35; letter-spacing: 8px; margin: 10px 0; }" +
            ".info { background: #f8f9fa; border-left: 4px solid #FF6B35; padding: 15px; margin: 20px 0; border-radius: 4px; }" +
            ".footer { background: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 14px; }" +
            "</style>" +
            "</head>" +
            "<body>" +
            "<div class=\"container\">" +
            "<div class=\"header\">" +
            "<h1>üçπ UTeaDrink</h1>" +
            "<p style=\"margin: 10px 0 0 0;\">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</p>" +
            "</div>" +
            "<div class=\"content\">" +
            "<h2 style=\"color: #333; margin-top: 0;\">Xin ch√†o " + name + "! üëã</h2>" +
            "<p style=\"color: #666; line-height: 1.6;\">" +
            "Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n. " +
            "Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP d∆∞·ªõi ƒë√¢y ƒë·ªÉ ti·∫øp t·ª•c:" +
            "</p>" +
            "<div class=\"otp-box\">" +
            "<p style=\"margin: 0; color: #666; font-size: 14px;\">M√É OTP C·ª¶A B·∫†N</p>" +
            "<div class=\"otp-code\">" + otpCode + "</div>" +
            "<p style=\"margin: 0; color: #999; font-size: 13px;\">M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t</p>" +
            "</div>" +
            "<div class=\"info\">" +
            "<strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>" +
            "<ul style=\"margin: 10px 0; padding-left: 20px; color: #666;\">" +
            "<li>M√£ OTP ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong></li>" +
            "<li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>" +
            "<li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>" +
            "</ul>" +
            "</div>" +
            "<p style=\"color: #666; margin-top: 30px;\">" +
            "N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email h·ªó tr·ª£." +
            "</p>" +
            "</div>" +
            "<div class=\"footer\">" +
            "<p style=\"margin: 0;\">¬© 2024 UTeaDrink - H·ªá th·ªëng qu·∫£n l√Ω c·ª≠a h√†ng tr√† s·ªØa</p>" +
            "<p style=\"margin: 10px 0 0 0;\">üìß Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi</p>" +
            "</div>" +
            "</div>" +
            "</body>" +
            "</html>";
    }
}
