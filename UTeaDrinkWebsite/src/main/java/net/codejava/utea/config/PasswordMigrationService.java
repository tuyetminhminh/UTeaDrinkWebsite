package net.codejava.utea.config;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.codejava.utea.common.entity.User;
import net.codejava.utea.common.repository.UserRepository;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Service ƒë·ªÉ migrate password t·ª´ plaintext sang BCrypt.
 * Ch·ªâ ch·∫°y 1 l·∫ßn khi chuy·ªÉn t·ª´ NoOpPasswordEncoder sang BCryptPasswordEncoder.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PasswordMigrationService {

    private final UserRepository userRepo;
    private final PasswordEncoder passwordEncoder;

    /**
     * ‚ö†Ô∏è C·∫¢NH B√ÅO: Ph∆∞∆°ng th·ª©c n√†y ch·ªâ d√πng ƒë·ªÉ migrate password M·ªòT L·∫¶N!
     * 
     * K·ªãch b·∫£n s·ª≠ d·ª•ng:
     * 1. Tr∆∞·ªõc ƒë√¢y: PasswordConfig d√πng NoOpPasswordEncoder ‚Üí password l∆∞u plaintext
     * 2. B√¢y gi·ªù: Chuy·ªÉn sang BCryptPasswordEncoder
     * 3. C·∫ßn: M√£ h√≥a l·∫°i t·∫•t c·∫£ password c≈© trong DB
     * 
     * SAU KHI CH·∫†Y XONG, H√ÉY:
     * - Comment l·∫°i annotation @EventListener b√™n d∆∞·ªõi
     * - Ho·∫∑c x√≥a file n√†y
     */
    // @EventListener(ApplicationReadyEvent.class) // ‚¨ÖÔ∏è COMMENT L·∫†I SAU KHI CH·∫†Y!
    @Transactional
    public void migratePasswords() {
        log.warn("========================================");
        log.warn("‚ö†Ô∏è  PASSWORD MIGRATION STARTING...");
        log.warn("========================================");

        List<User> allUsers = userRepo.findAll();
        int migratedCount = 0;
        int skippedCount = 0;

        for (User user : allUsers) {
            String currentHash = user.getPasswordHash();
            
            // Ki·ªÉm tra xem password ƒë√£ ƒë∆∞·ª£c m√£ h√≥a b·∫±ng BCrypt ch∆∞a
            // BCrypt hash lu√¥n b·∫Øt ƒë·∫ßu v·ªõi "$2a$", "$2b$", ho·∫∑c "$2y$"
            if (currentHash != null && currentHash.startsWith("$2")) {
                log.debug("User {} ƒë√£ c√≥ BCrypt hash, b·ªè qua", user.getEmail());
                skippedCount++;
                continue;
            }

            // N·∫øu password l√† plaintext ho·∫∑c NoOp, m√£ h√≥a l·∫°i
            if (currentHash != null && !currentHash.isBlank()) {
                String bcryptHash = passwordEncoder.encode(currentHash);
                user.setPasswordHash(bcryptHash);
                userRepo.save(user);
                
                log.info("‚úÖ Migrated password for user: {} (ID: {})", user.getEmail(), user.getId());
                migratedCount++;
            } else {
                log.warn("‚ö†Ô∏è  User {} has null/empty password, skipped", user.getEmail());
                skippedCount++;
            }
        }

        log.warn("========================================");
        log.warn("üéâ PASSWORD MIGRATION COMPLETED!");
        log.warn("üìä Total users: {}", allUsers.size());
        log.warn("‚úÖ Migrated: {}", migratedCount);
        log.warn("‚è≠Ô∏è  Skipped: {}", skippedCount);
        log.warn("========================================");
        log.error("üö® QUAN TR·ªåNG: Comment l·∫°i @EventListener trong PasswordMigrationService.java!");
        log.warn("========================================");
    }

    /**
     * Ph∆∞∆°ng th·ª©c ki·ªÉm tra xem m·ªôt password c√≥ ph·∫£i BCrypt hash kh√¥ng
     */
    public boolean isBCryptHash(String password) {
        if (password == null || password.length() < 10) {
            return false;
        }
        return password.startsWith("$2a$") || 
               password.startsWith("$2b$") || 
               password.startsWith("$2y$");
    }
}

